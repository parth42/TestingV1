@using DevExpress.Web.Mvc;
@using DevExpress.Web.Mvc.UI;
@model  WordAutomationDemo.Models.AssignmentModel
@if (!string.IsNullOrEmpty(Model.DocumentName))
{
    if (!string.IsNullOrEmpty(Model.DocumentName))
    {
        @Html.DevExpress().RichEdit(settings =>
{
    settings.Name = "SectionDoc";
    settings.CallbackRouteValues = new { Controller = "Section", Action = "LoadSectionDoc" };
    settings.WorkDirectory = WordAutomationDemo.Models.DirectoryManagmentUtils.DocumentBrowsingFolderPath;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Height = System.Web.UI.WebControls.Unit.Pixel(700);
    settings.RibbonMode = DevExpress.Web.ASPxRichEdit.RichEditRibbonMode.Auto;
    settings.ShowConfirmOnLosingChanges = false;
    settings.ReadOnly = Model.IsReadOnly;
    settings.ActiveTabIndex = 0;
    //settings.AutoSaveMode = DevExpress.Web.Office.Internal.AutoSaveMode.On;
    settings.EnableClientSideAPI = true;
    //settings.Settings.Behavior.Cut = DevExpress.XtraRichEdit.DocumentCapability.Hidden;
    //settings.Settings.Behavior.Copy = DevExpress.XtraRichEdit.DocumentCapability.Hidden;
    //settings.Settings.Behavior.Paste = DevExpress.XtraRichEdit.DocumentCapability.Hidden;
    settings.Settings.Behavior.FullScreen = DevExpress.XtraRichEdit.DocumentCapability.Hidden;
    settings.Init = (s, e) =>
    {
        var rich = s as MVCxRichEdit;
        rich.CreateDefaultRibbonTabs(true);
        rich.RibbonTabs[0].Visible = false;
        rich.RibbonTabs.Find(c => c.Text.Contains("Merge")).Visible = false;
    };
    settings.PreRender = (s, e) =>
    {
        MVCxRichEdit rEdits = (MVCxRichEdit)s;
        rEdits.Focus();
    };
}).Open(Path.Combine(WordAutomationDemo.Models.DirectoryManagmentUtils.InitialDemoFilesPathSection, Model.DocumentName)).GetHtml()
    }
    else
    {
        @Html.DevExpress().RichEdit(settings =>
{
    settings.Name = "SectionDoc";
    settings.CallbackRouteValues = new { Controller = "Section", Action = "LoadSectionDoc" };
    settings.WorkDirectory = WordAutomationDemo.Models.DirectoryManagmentUtils.DocumentBrowsingFolderPath;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Height = System.Web.UI.WebControls.Unit.Pixel(700);
    settings.RibbonMode = DevExpress.Web.ASPxRichEdit.RichEditRibbonMode.Auto;
    settings.ShowConfirmOnLosingChanges = false;
    settings.ReadOnly = Model.IsReadOnly;
    settings.ActiveTabIndex = 0;
    //settings.AutoSaveMode = DevExpress.Web.Office.Internal.AutoSaveMode.On;
    settings.EnableClientSideAPI = true;
    settings.Settings.Behavior.FullScreen = DevExpress.XtraRichEdit.DocumentCapability.Hidden;
    settings.Init = (s, e) =>
    {
        var rich = s as MVCxRichEdit;
        rich.CreateDefaultRibbonTabs(true);
        rich.RibbonTabs[0].Visible = false;
        rich.RibbonTabs.Find(c => c.Text.Contains("Merge")).Visible = false;
    };
    settings.PreRender = (s, e) =>
    {
        MVCxRichEdit rEdits = (MVCxRichEdit)s;
        rEdits.Focus();
    };
}).GetHtml()

    }
}

