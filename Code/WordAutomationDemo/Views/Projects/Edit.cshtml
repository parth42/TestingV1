@model WordAutomationDemo.Models.ProjectModel
@using WordAutomationDemo.Common
@using Kendo.Mvc.UI
@{
    ViewBag.Title = "Edit Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/Common/bootstrap-multiselect.js"></script>
<link href="~/CSS/Common/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/Custom/Projects.js"></script>
<div class="row">
    <div class="col-sm-12">
        <div class="main-heading title-row mbp15">
            <div class="row">
                <div class="col-xs-12">
                    <h1 class="heading01">Edit Project</h1>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-12 mtp10">
        @using (Html.BeginForm("Edit", "Projects", FormMethod.Post, new { enctype = "multipart/form-data", id = "CreateUpload" }))
        {
            @Html.AntiForgeryToken()
            @*<div class="alert alert-danger" id="validationSummary">
                @Html.ValidationSummary()
            </div>*@
            @Html.HiddenFor(x => x.ProjectID)
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="name">Project Name<span class="mandatory">*</span></label>
                        @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                        <p class="errormessage">
                            @Html.ValidationMessageFor(model => model.Name)
                            <span id='spanConfirm'></span>
                        </p>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group multiselectbox">
                        <label for="projectDocuments">Project Documents</label>
                        @Html.DropDownListFor(model => model.DocumentID, new MultiSelectList(Model.WordList, "Value", "Text", Model.ProjectDocuments.Select(x => x.Value)), new { @class = "form-control", @id = "projectDocuments", @multiple = "multiple" })
                    </div>
                </div>
                @if (Model.MemberList != null && Model.MemberList.Count > 0)
                {
                    <div class="col-sm-4">
                        <div class="form-group multiselectbox">
                            <label for="selectMembers">Select Members</label>
                            @Html.DropDownListFor(model => model.MemberIDList, new MultiSelectList(Model.Members, "Value", "Text", Model.MembersSelected.Select(x => x.Value)), new { @class = "form-control", @id = "selectMembers", @multiple = "multiple" })
                        </div>
                    </div>
                }
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="name">Description</label>
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = 5 })
                    </div>
                </div>
                <div class="col-sm-8">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Start Date</label>
                                <div class="input-group data" id="datetimepickerStrDate">
                                    @Html.TextBoxFor(model => model.strStartDate, new { @class = "form-control" })
                                    <span class="input-group-addon btn-primary"> <i class="fa fa-calendar" aria-hidden="true"></i> </span>
                                </div>

                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>End Date</label>
                                <div class="input-group data" id="datetimepickerEndDate">
                                    @Html.TextBoxFor(model => model.strEndDate, new { @class = "form-control" })
                                    <span class="input-group-addon btn-primary"> <i class="fa fa-calendar" aria-hidden="true"></i> </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-8">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group multiselectbox">
                                <label for="UploadNewFile">Upload New File</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" readonly>
                                    <label class="input-group-btn">
                                        <span class="btn btn-primary">
                                            Browse&hellip; <input type="file" name="docFile" onchange="ValidateType(this)" style="display: none;" multiple>
                                        </span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-6">
                            <div class="form-group">
                                <label for="name">Status</label>
                                <div class="clearfix">
                                    <label class="radio-inline">
                                        @Html.RadioButtonFor(model => model.Status, (int)Global.ProjectStatus.Active, new { id = (int)Global.ProjectStatus.Active })
                                        <label for=@Global.ProjectStatus.Active>@Global.ProjectStatus.Active</label>
                                    </label>
                                    <label class="radio-inline">
                                        @Html.RadioButtonFor(model => model.Status, (int)Global.ProjectStatus.InActive, new { id = (int)Global.ProjectStatus.InActive })
                                        <label for=@Global.ProjectStatus.InActive>@Global.ProjectStatus.InActive</label>
                                    </label>
                                    <label class="radio-inline">
                                        @Html.RadioButtonFor(model => model.Status, (int)Global.ProjectStatus.Completed, new { id = (int)Global.ProjectStatus.Completed })
                                        <label for=@Global.ProjectStatus.Completed>@Global.ProjectStatus.Completed</label>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <button class="lightblue-btn btnspace btnSubmitForm" type="submit"><i class="fa fa-pencil" aria-hidden="true"></i> Update</button>
                    <button class="darkblue-btn btnspace" type="button" onclick="location.href='@Url.Action("Index", "Projects")';return false;"><i class="fa fa-angle-left" aria-hidden="true"></i> Back</button>
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade bs-example-modal-lg" id="DocumentModal" tabindex="1000" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="overflow:auto;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">  <span id="contentType">View Document </span></h4>
            </div>
            <div class="modal-body" id="partialContentDoc" style="line-height:25px;">
                <div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="popup" data-backdrop="static" style="border:1px solid gray;z-index:99999;display:none;">Popup</div>

<script type="text/x-kendo-tmpl" id="template">
    <div class="pull-left" style="padding:10px;overflow:auto;max-height:250px"> #=ThumbnailLink#</div>
</script>

<div class="modal fade bs-example-modal-lg" id="AllSlidesModel" tabindex="1000" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="overflow:auto;">

        <div class="modal-content">
            <div class="modal-header">
                <div class="pull-right">
                    <a id="downloadLink" href="#"><i class="glyphicon glyphicon-download-alt " title="Download Original File"></i></a>
                </div>
                <h4 class="modal-title" id="myModalLabel">  <span id="contentType">View Document </span></h4>
            </div>
            <div class="modal-body" id="partialContent" style="line-height:25px;">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().ListView<WordAutomationDemo.Models.ProjectModel>()
    .Name("listView2")
    .TagName("div")
    .ClientTemplateId("template")

    .DataSource(dataSource =>
    {
        dataSource.Read(read => read.Action("GetAllSlidesForProjectDoc", "Projects").Data("AllSlidesParamas"));
    }).HtmlAttributes(new { style = "max-height:250px;overflow-y:auto" }))
                    <div class="clearfix"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>


    $(function () {
        $('#datetimepickerStrDate').datetimepicker({
            format:'@WordAutomationDemo.Helpers.CurrentUserSession.User.DTformat',
            viewMode: 'days',
            keepOpen: false,
            useCurrent: false,
            defaultDate: moment('@Model.strStartDate'),
           // minDate: moment('@Model.strStartDate'),
            allowInputToggle: true,
        });

        $('#datetimepickerEndDate').datetimepicker({
            format:'@WordAutomationDemo.Helpers.CurrentUserSession.User.DTformat',
            viewMode: 'days',
            useCurrent: false,
            keepOpen: false,
            defaultDate: moment('@Model.strEndDate'),
            minDate: moment('@Model.strEndDate'),
            allowInputToggle: true,
        });

    });

    function IsProjectExists() {
        var name = $("#Name").val().trim();
        var projectId = $("#ProjectID").val();
        $(".validation-summary-errors").html('').hide();
        if (name.length > 0) {
            var n = SiteUrl + "/Projects/CheckDuplication", t = { Name: name, ProjectId: projectId };
            $.post(n, t, function (n) { n == "1" ? ($("#duplicateRecord").show(), $("#btnSubmit").prop("disabled", !0)) : ($("#duplicateRecord").hide(), $("#btnSubmit").prop("disabled", !1)) }, "json")
        }
    }
    $(function () {
        $("#Name").focus();
        $("#Name").change(function () { IsProjectExists() })
        $("#DocumentID").multiselect({ noneSelectedText: '- Select Documents -' });
    })
    $(document).ready(function () {

        @*$("#strStartDate").datetimepicker({
            format: 'MM/DD/YYYY',
            viewMode: 'days',
            useCurrent: false,
            //defaultDate: moment('@Model.strStartDate'),
            //minDate: moment('@Model.strStartDate'),
            allowInputToggle: true
        });

        //$("#strStartDate").on("keydown", function () {
        //    return false;
        //});
        //$("#strEndDate").on("keydown", function () {
        //    return false;
        //});
        $("#strEndDate").datetimepicker({
            format: 'MM/DD/YYYY',
            viewMode: 'days',
            useCurrent: false,
            //defaultDate: moment('@Model.strEndDate').add("days", 1),
            //minDate: moment('@Model.strEndDate').add("days", 1),
            allowInputToggle: true
        });*@

        $("#strStartDate").on("dp.change", function (e) {
            $(this).blur();
            $('#strEndDate').data("DateTimePicker").setMinDate(moment(e.date).add(1, 'days'));
            if ($('#strEndDate').data("DateTimePicker").getDate() <= e.date) {
                $('#strEndDate').data("DateTimePicker").setDate(moment(e.date).add(1, 'days'));
            }
        });

        $("#strEndDate").on("dp.change", function (e) {
            $(this).blur();
            $('#strStartDate').data("DateTimePicker").setMaxDate(moment(e.date).add(1, 'days'));

        });
    });

    function ShowImg(obj) {
        $('.popup').hide();
        $('.popup').html('<img style="border:1px solid" src="' + $(obj).data('id') + '" />');
        var offset = $(obj).offset();
        $('.popup').css('left', 300);
        $('.popup').css('top', offset.top);
        $('.popup').show();
    }

    function HideImg(obj) {
        $('.popup').hide();
    }

    $("#DocumentModal").on('shown.bs.modal', function () {
        $('#ProjectDoc_R_TC_TPTCL_MinBtn').click();
        $('#ProjectDoc_R_TC_TPTCL_MinBtn').click();
    });
    function GetPPTSlides(id, name) {
        var id = id;
        var name = name;
        $("#downloadLink").attr("href", '@Url.Content("~/ApplicationDocuments/ProjectDocuments/")' + id + "/" + name)
        $("#MasterDocName").val(name);
        $("#ProjectID").val(id);
        $('#AllSlidesModel').modal('show');
        $("#listView2").data("kendoListView").dataSource.read();

    }

    function AllSlidesParamas() {
        return {
            FileName: $("#MasterDocName").val(),
            ProjectID: $("#ProjectID").val(),
        };
    }

    function OpenProjectDoc(id, name) {
        if (name != "") {
            $.get('@Url.Action("LoadProjectDoc", "Projects")', { ProjectID: id, FileName: name }, function (partialView) {
                $("#partialContentDoc").html(partialView);
                $('#DocumentModal').modal('show');
            });
        }
    }

    function ValidateType(e) {

        if ($(e).val() != "") {
            var ext = $(e).val().split('.').pop().toLowerCase();
            if ($.inArray(ext, ['docx', 'doc', 'ppt', 'pptx', 'xls', 'xlsx']) == -1) {
                alert("Only documents files can be uploaded!")
                $(e).val('');
            }
            //if (input.size / 1024 / 1024 > 5) {
            //    alert("Max 5Mb file size is allowed!")
            //    $(input).val('');
            //}
        }
    }

</script>
<style>
    .k-picker-wrap .k-select, .k-numeric-wrap .k-select, .k-dropdown-wrap .k-select {
        padding: 7px !important;
    }

    .k-dropdown .k-dropdown-wrap {
        background: #fff !important;
        border-radius: 0 !important;
        height: 32px !important;
        padding-top: 4px !important;
    }

    .k-list {
        max-height: 160px !important;
        height: auto !important;
    }

    .k-list-container {
        background-color: #fff !important;
        border-color: #c5c5c5 !important;
        max-height: 200px !important;
        height: auto !important;
    }

    .k-group-header {
        padding: 5px 8px !important;
        color: #000 !important;
        background: #dedede !important;
    }

    .k-state-default p {
        margin: 0px !important;
        padding-left: 0px !important;
        font-size: 11px !important;
        line-height: 18px !important;
    }

    .k-list .k-state-hover, .k-state-focused {
        background: #4ca0dd !important;
        border-radius: 0px !important;
        color: #fff !important;
        border: 0px !important;
    }

    .k-animation-container {
        max-height: 200px !important;
        height: auto !important;
    }

    .k-list-optionlabel {
        background: #4ca0dd !important;
        box-shadow: none !important;
        padding: 5px !important;
    }
</style>