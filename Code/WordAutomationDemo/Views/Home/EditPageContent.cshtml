@using DevExpress.Web.Mvc;
@using DevExpress.Web.Mvc.UI;
@model WordAutomationDemo.Models.AssignmentModel
@{
    ViewBag.Title = "Edit Content";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var canPublish = WordAutomationDemo.Common.Global.AssignmentMemberCanPublish(Model.AssignID, WordAutomationDemo.Helpers.CurrentUserSession.User.UserID);
    var canSendForApproval = WordAutomationDemo.Common.Global.AssignmentMemberCanSendForApproval(Model.AssignID, WordAutomationDemo.Helpers.CurrentUserSession.User.UserID);
    var downloadLink = @Url.Content("~/App_Data/UserDocs/General/") + Model.OriginalDocumentName;
}
<div class="row">
    <div class="col-sm-12">
        <div class="main-heading title-row mbp15">
            <div class="row">
                <div class="col-xs-11">
                    <h1 class="heading01">Edit Content</h1>
                </div>
                <div class="col-xs-1">
                    @*<button href="#" class="darkblue-btn btnspace" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Refresh" onclick="RefreshPage()">Refresh</button>*@
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-12 mtp10">

        @using (Html.BeginForm("EditPageContent", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmEdit" }))
        {
            @*@Html.HiddenFor(x => x.OriginalFile);
                @Html.HiddenFor(x => x.AssignedTaskID);
                @Html.HiddenFor(x => x.ListSlides);*@

        if (Request.QueryString["Msg"] != null && Request.QueryString["Msg"].ToString() == "Completed")
        {
            <div class="alert alert-success" id="Completed">
                @Html.Encode(String.Format(WordAutomationDemo.Common.Messages.SuccessChanged, "Slide"))
            </div>
            <script>
                $("#Completed").show().focus();
                setTimeout(function () {
                    $("#Completed").hide();
                }, 5000);
            </script>
        }
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        <label for="UserName">Project Name </label>
                        <p class="form-control-static">@Model.ProjectName</p>
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group">
                        <label for="FullName">Task Name</label>
                        <p class="form-control-static">@Model.TaskName</p>
                    </div>
                </div>

            </div>
            <div class="row" style="height: 20px;margin-bottom: 20px;">
                <div class="col-lg-12 pull-left">
                    <a title="View Comment History" style="cursor:pointer;color:rgb(76,160,221);font-size:11px;position: absolute;/* top: 0; */" onclick="OpenCommentHistory('@Model.AssignID')">View Comments</a>
                </div>
            </div>
        <div class="row">
            <div class="col-sm-12">

                <div class="table-responsive bluetheme">

                    <table class="table table-bordered">
                        <tr>
                            @*<th></th>*@
                            @if (!(Model.AssignedPages.All(ap => ap.PageNumber == 0) && Model.AssignedPages.Count > 1)) { 
                                <th>
                                    Page Number
                                </th>
                            }
                            <th>Assigned</th>
                            <th>Content</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                        @{
                            int imgCnt = 0;
                            int cntThImg = 0;
                            foreach (var item in Model.AssignedPages)
                            {
                                <tr>
                                    @if (!(Model.AssignedPages.All(ap => ap.PageNumber == 0) && Model.AssignedPages.Count > 1))
                                    {
                                        <td>@item.PageNumber</td>
                                    }
                                    @*<td class="popover-hide-xs">
                                        <a href="javascript:;" data-toggle="popover" data-trigger="hover" data-placement="right" id="@("pptA"+item.PageNumber)" class="gridthumb">
                                            <img src="@item.AssignedThumbnail" alt="" class="img-responsive img-thumbnail">
                                        </a>
                                        <div id="popover-content-@("pptA"+item.PageNumber)" class="hide">
                                            <img src="@item.AssignedThumbnail" alt="" class="img-responsive">
                                        </div>
                                    </td>*@
                                    <td>
                                        <a style='cursor: pointer;' title='View' class='onlyicon bluecolor' data-toggle='modal' onclick="OpenAssignedContent(this, '@item.Ticks', @item.PageNumber, @Model.AssignID, true)" data-originalFile='@item.OriginalFile' id=@("page-" + item.PageNumber)><i class='fa fa-file-word-o' aria-hidden='true'></i></a>
                                    </td>

                                    <td>
                                        <a style='cursor: pointer;' title='View' class='onlyicon bluecolor' data-toggle='modal' onclick="OpenAssignedContent(this, '@item.Ticks', @item.PageNumber, @Model.AssignID, false)" data-originalFile='@item.OriginalFile' id=@("page-" + item.PageNumber)><i class='fa fa-file-word-o' aria-hidden='true'></i></a>
                                    </td>

                                    @if (item.IsPublished.HasValue && item.IsPublished == true)
                                    {
                                        <td>@item.Remarks</td>
                                        <td>Page already published.</td>
                                    }
                                    else if (item.ReviewRequested.HasValue && item.ReviewRequested == true)
                                    {
                                        <td>@item.Remarks</td>
                                        <td>Waiting for approval.</td>
                                    }
                                    else
                                    {
                                        <td>
                                            @Html.TextArea(String.Format("{0}", "txtPageRemarks" + item.PageNumber), item.Remarks, new {@class = "form-control", @txtRemarksPage = ""})
                                        </td>

                                        <td id="@(String.Format("{0}", "td" + item.PageNumber))">
                                            @if (canPublish)
                                            {
                                                <button type="button" onclick="PublishPage(@Model.AssignID, @item.PageNumber, '@item.Ticks', '@item.OriginalFile');" class="tableicon bluebg" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Complete">Publish</button>
                                            }
                                            @if (canSendForApproval)
                                            {
                                                <button type="button" onclick="RequestReviewPage(@Model.AssignID, @item.PageNumber, '@item.Ticks', '@item.OriginalFile');" class="tableicon bluebg" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Complete">Request Review</button>
                                            }
                                        </td>
                                    }
                                </tr>
                                imgCnt += 1;
                            }
                        }
                    </table>

                    @*@if (canPublish)
                    {
                        <button type="button" class="btn btn-primary pull-left" onclick="ApproveWordPages()" style="margin-right:10px;">Publish</button>
                    }

                    @if (canSendForApproval)
                    {
                        <button type="button" class="btn btn-primary pull-left" onclick="RequestReviewWordPages()">Request Review</button>
                    }*@
                </div>
            </div>
        </div>
        <div class="popup" style="border:1px solid gray;z-index:99999;display:none;">Popup</div>
         }
    </div>
</div>

<div class="popup" data-backdrop="static" style="z-index:11000;display:none;">Popup</div>
<div id="spinner" style="display:none;">
    <img src=@Url.Content("~/CSS/images/bx_loader.gif") class="ajax-loader loading-spinner">
</div>

<div class="modal fade bs-example-modal-lg" id="ReportsModal" tabindex="1000" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="overflow:auto;">
        <div class="modal-content">
            <div class="modal-header">
                <div class="pull-right">
                    @*<a id="DocdownloadLink" href="#"><i class="glyphicon glyphicon-download-alt " title="Click to Download "></i></a>*@
                    &nbsp;&nbsp;
                    <button type="button" title="Close" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                </div>
                <h4 class="modal-title" id="myModalLabel">  <span id="contentType">View Document </span></h4>
            </div>
            <div class="modal-body" id="partialContent">
                <div>

                </div>
            </div>
            @*<div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>*@
        </div>
    </div>
</div>

<div class="modal fade" id="CommentHistoryModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Comment History</h4>
            </div>
            <div class="modal-body">
                <div class="table-responsive bluetheme mtp15" id="partialContentComment">

                </div>
            </div>
            @*<div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>*@
        </div>
    </div>
</div>

<script type="text/javascript">

    $("[data-toggle=popover]").each(function (i, obj) {
        $(this).popover({
            html: true,
            content: function () {
                var id = $(this).attr('id')
                return $('#popover-content-' + id).html();
            }
        });

    });
    $(".aniimated-thumbnials").lightGallery({
        thumbnail: true,
        animateThumb: false,
        loop: false,
        enableSwipe: true

    });
    $(window).off("resize").on("resize", function () {
        $(".popover").each(function () {
            var popover = $(this);
            if (popover.is(":visible")) {
                var ctrl = $(popover.context);
                ctrl.popover('show');
            }
        });
    });

    function OpenAssignedContent(e, ticks, pageNumber, assignmentID, isReadOnly) {
        var OriginalDocumentName = $(e).attr("data-originalFile");
        var name = assignmentID + "-" + ticks + "-" + pageNumber + ".docx";
        $("#partialContent").html('<p class="center"><i class="glyphicon glyphicon-repeat glyphicon-spin"> </i>&nbsp;&nbsp;Loading...</p>');
        $('#ReportsModal').modal('show');
        $.get('@Url.Action("LoadPageSnippet", "Home")',
            { name: name, userid: 1, IsReadOnly: isReadOnly, originalFile: OriginalDocumentName },
            function (partialView) {
                $("#partialContent").html(partialView);

                //$('#Snippet_R_TC_TPTCL_MinBtn').click();
                //$('#Snippet_R_TC_TPTCL_MinBtn').click();
            });

    }

    function OpenCommentHistory(assignmentID) {
        //var name = "Documents/" + e.id;
        $("#partialContentComment").html('<p class="center"><i class="glyphicon glyphicon-repeat glyphicon-spin"> </i>&nbsp;&nbsp;Loading...</p>');
        $('#CommentHistoryModal').modal('show');
        $.get('@Url.Action("LoadCommentHistory", "Home")', { assignmentID: assignmentID }, function (partialView) {
            $("#partialContentComment").html(partialView);
        });
    }

    function PublishPage(assignmentID, pageNumber, ticks, originalFile){
        var fileData = new FormData();
        fileData.append('assignmentID', assignmentID);
        fileData.append('PageNumber', pageNumber);
        fileData.append('ticks', ticks);
        fileData.append('originalFile', originalFile);
        fileData.append('PageRemarks', $('#txtPageRemarks' + pageNumber).val());
        var remarks = "";
        console.log(assignmentID, originalFile);
        $.ajax({
            url: SiteUrl + 'Home/PublishPage',
            type: "POST",
            contentType: false, // Not to set any content header
            processData: false, // Not to process data
            //dataType: "JSON",
            //async: false,
            data: fileData,
            error: function () {
                alert("Server access failure!");
                $(".glyphicon-refresh").removeClass("glyphicon-spin");
            },
            success: function (result) {
                if (result == "1") {
                    window.location.href = SiteUrl + 'Home/Approval?Msg=Completed';
                }
                else if (result == "2") {
                    window.location.href = SiteUrl + 'Home/EditPageContent/' + assignmentID + "?Msg=Completed";
                }
            }
        });
    }

    function RequestReviewPage(assignmentID, pageNumber, ticks, originalFile) {
        var fileData = new FormData();

        // Adding one more key to FormData object
        fileData.append('assignmentID', assignmentID);
        fileData.append('PageNumber', pageNumber);
        fileData.append('originalFile', originalFile);
        fileData.append('ticks', ticks);
        fileData.append('PageRemarks', $('#txtPageRemarks' + pageNumber).val());
        var remarks = "";
        console.log(assignmentID, originalFile);
        $.ajax({
            url: SiteUrl + 'Home/RequestReviewPage',
            type: "POST",
            contentType: false, // Not to set any content header
            processData: false, // Not to process data
            //dataType: "JSON",
            //async: false,
            data: fileData,
            error: function () {
                alert("Server access failure!");
                $(".glyphicon-refresh").removeClass("glyphicon-spin");
            },
            success: function (result) {
                if (result == "1") {
                    window.location.href = SiteUrl + 'Home/Approval?Msg=Completed';
                }
                else if (result == "2") {
                    window.location.href = SiteUrl + 'Home/EditPageContent/' + assignmentID + "?Msg=Completed";
                }
            }
        });
    }

    var x = 0;
    var flag = false;
    var Strikeflag = false;
    var isBackSpace = false;
    var BackSpaceCommand;
    var InsertCommand;
    var DeleteCommand;
    function DocumentChanged(s, e) {

        //console.log("-- Document Changed --");

        var CurrentCommand = Snippet.core.commandManager.lastCommandsChain[0]; // detect BACKSPACE
        //console.log(CurrentCommand);
        if (CurrentCommand == BackSpaceCommand) {
            //console.log("-- BackSpace Pressed --");
            //console.log(s);
            //check for newly added text for deletion
            //var selection = Snippet.core.selection.getLastSelectedInterval();
            //Snippet.core.selection.setSelection(selection.start - 1, selection.start + 1);
            //var color = Snippet.commands.changeFontFormatting.getState().value.foreColor;
            //console.log(color);
            //if (color != '#0000FF') {
            OverrideBackSpace(Snippet, e);
            //}
            //else {
            //    Snippet.core.selection.setSelection(selection.start, selection.start);
            //}

        }
        else if (CurrentCommand == DeleteCommand) {
            OverrideDelete(Snippet, e);
        }
        else if (CurrentCommand == InsertCommand) { // detect INSERT Text
            console.log("-- No BackSpace --");
            console.log(s);
            GetNewAddedText(Snippet);
        }
        else {
            flag = false;
        }
        
    }

    function DocumentInit(s, e) {
        var pointer = Snippet.core.selection.getLastSelectedInterval();
        x = (pointer.start);
        BackSpaceCommand = Snippet.core.commandManager.getCommand(__aspxRichEdit.RichEditClientCommand.ToggleBackspaceKey); // or 125
        InsertCommand = Snippet.core.commandManager.commands["117"];  // Set insert command at init
        DeleteCommand = Snippet.core.commandManager.commands["126"];
    }

    function OverrideDelete(rich, e) {
        Strikeflag = false;
        if (Strikeflag == false) {
            Strikeflag = true;
            rich.core.commandManager.commands["6"].execute(); // undo command
            var selection = rich.core.selection.getLastSelectedInterval();
            console.log(selection);
            console.log(selection);
            if (selection.length == 0) {
                rich.core.selection.setSelection(selection.start, selection.start + 1);
            }
            else {
                rich.core.selection.setSelection(selection.start, selection.start + selection.length);
            }

            if (rich.commands.changeFontFormatting.getState().value.foreColor == '#0000FF') {
                rich.core.commandManager.commands["7"].execute(); // redo command
            } else if (rich.commands.changeFontStrikeout.coreState.value == 1) {
                rich.commands.changeFontStrikeout.execute();
                rich.commands.changeFontStrikeout.execute();
            } else {
                rich.commands.changeFontStrikeout.execute();
            }

            if (selection.length == 0) {
                rich.selection.goToNextCharacter();
            } else {
                rich.core.selection.setSelection(selection.start + selection.length, selection.start + selection.length);
            }
            console.log(rich);
        }
    }

    function OverrideBackSpace(rich, e) {

        Strikeflag = false;
        if (Strikeflag == false) {
            Strikeflag = true;
            rich.core.commandManager.commands["6"].execute(); // undo command
            var selection = rich.core.selection.getLastSelectedInterval();
            if (selection.length == 0) {
                rich.core.selection.setSelection(selection.start - 1, selection.start);
            }
            else if (selection.length > 0) {
                rich.core.selection.setSelection(selection.start, selection.start + selection.length);
            }
            if (rich.commands.changeFontFormatting.getState().value.foreColor == '#0000FF') {
                rich.core.commandManager.commands["7"].execute(); // redo command
            }
            else if (rich.core.commandManager.commands["24"].getState().value == 0 || rich.core.commandManager.commands["24"].getState().value == undefined) {
                rich.commands.changeFontStrikeout.execute()
            }
            rich.core.selection.setSelection(selection.start - 1, selection.start - 1);
        }
    }

    function GetNewAddedText(rich) {
        var selection = rich.core.selection.getLastSelectedInterval();
        x = (selection.start);
        if (flag == false) {
            flag = true;
            rich.core.selection.setSelection(selection.start - 1, selection.start);
            if (rich.core.commandManager.commands["24"].getState().value == 1) {
                rich.commands.changeFontStrikeout.execute();
            }
            rich.commands.changeFontFormatting.execute({ foreColor: "#0000FF" })
            rich.core.selection.setSelection(selection.start, selection.start);
        }
        else {
            rich.core.selection.setSelection(selection.start, selection.start);
            flag = false;
        }
    }
</script>